import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useTheme } from '../context/ThemeContext';
import axios from 'axios';
import { toast } from 'react-toastify';

const Chatbot = () => {
  const { user } = useAuth();
  const { isDarkMode } = useTheme();
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: `Hello ${user?.name || 'there'}! üëã I'm your Advanced AI Health Assistant powered by intelligent medical knowledge. I can help you with:\n\nüè• Symptom analysis & guidance\nüíä Medication information\nüçé Nutrition & diet planning\nüèÉ Exercise recommendations\nüò¥ Sleep optimization\nüß† Mental health support\nüö® Emergency assistance\n\nWhat can I help you with today?`,
      sender: 'bot',
      timestamp: new Date(),
      type: 'welcome'
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [conversationMode, setConversationMode] = useState('general'); // general, symptom-checker, diet-planner
  const messagesEndRef = useRef(null);
  const [showSuggestions, setShowSuggestions] = useState(true);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Enhanced health knowledge base with medical intelligence
  const healthKnowledge = {
    symptoms: {
      keywords: ['headache', 'fever', 'cough', 'cold', 'pain', 'stomach', 'nausea', 'dizzy', 'tired', 'fatigue', 'sore throat', 'runny nose', 'body ache', 'chills', 'weakness'],
      responses: [
        "Based on your symptoms, I can provide some guidance. Could you tell me:\n‚Ä¢ When did the symptoms start?\n‚Ä¢ How severe is it (1-10 scale)?\n‚Ä¢ Any other associated symptoms?\n‚Ä¢ Have you taken any medication?\n\nThis will help me provide better advice.",
        "I understand you're experiencing discomfort. Here's what I suggest:\n\n1. Monitor your symptoms carefully\n2. Rest and stay hydrated\n3. Track temperature if fever is present\n4. Avoid self-medication without guidance\n\n‚ö†Ô∏è Seek medical attention if symptoms worsen or persist beyond 48 hours.",
        "Common symptom management tips:\n\nüíß Hydration: Drink 8-10 glasses of water daily\nüò¥ Rest: Get adequate sleep (7-9 hours)\nüå°Ô∏è Monitor: Keep track of symptom changes\nüç≤ Nutrition: Eat light, nutritious meals\n\nIf symptoms are severe or you're concerned, consult a healthcare provider immediately."
      ]
    },
    headache: {
      keywords: ['headache', 'migraine', 'head pain', 'head hurt'],
      responses: [
        "For headache relief:\n\n‚úÖ Immediate relief:\n‚Ä¢ Rest in a quiet, dark room\n‚Ä¢ Apply cold compress to forehead\n‚Ä¢ Drink water (dehydration causes headaches)\n‚Ä¢ Gentle neck massage\n\n‚ö†Ô∏è See a doctor if:\n‚Ä¢ Severe sudden headache (thunderclap)\n‚Ä¢ Vision changes or confusion\n‚Ä¢ Headache after head injury\n‚Ä¢ Persistent daily headaches",
        "Headache types & management:\n\nüîπ Tension headache: Stress-related, tight band feeling\n   ‚Üí Relaxation techniques, OTC pain relievers\n\nüîπ Migraine: Throbbing, one-sided, light sensitivity\n   ‚Üí Prescribed medications, avoid triggers\n\nüîπ Cluster headache: Severe pain around eye\n   ‚Üí Requires medical evaluation\n\nüí° Prevention: Regular sleep, stress management, stay hydrated"
      ]
    },
    fever: {
      keywords: ['fever', 'temperature', 'hot', 'burning'],
      responses: [
        "Fever management guide:\n\nüå°Ô∏è Normal: 98.6¬∞F (37¬∞C)\n‚ö†Ô∏è Fever: >100.4¬∞F (38¬∞C)\nüö® High: >103¬∞F (39.4¬∞C)\n\nImmediate actions:\n1. Stay hydrated (water, ORS)\n2. Light clothing, room ventilation\n3. Lukewarm sponge bath\n4. Rest completely\n5. Monitor temperature every 4 hours\n\nüíä Medication (if needed):\n‚Ä¢ Acetaminophen/Paracetamol\n‚Ä¢ Ibuprofen (adults)\n\n‚ö†Ô∏è Seek immediate care if:\n‚Ä¢ Fever >103¬∞F persists\n‚Ä¢ Difficulty breathing\n‚Ä¢ Severe headache/stiff neck\n‚Ä¢ Rash or confusion"
      ]
    },
    nutrition: {
      keywords: ['diet', 'food', 'nutrition', 'vitamins', 'healthy eating', 'weight', 'calories', 'meal', 'protein', 'carbs'],
      responses: [
        "üçé Balanced Diet Essentials:\n\n‚úÖ Daily Requirements:\n‚Ä¢ Fruits: 2-3 servings\n‚Ä¢ Vegetables: 3-4 servings\n‚Ä¢ Whole grains: 6-8 servings\n‚Ä¢ Protein: 2-3 servings (fish, chicken, legumes)\n‚Ä¢ Dairy: 2-3 servings (low-fat options)\n‚Ä¢ Healthy fats: Nuts, avocado, olive oil\n\nüíß Hydration: 8-10 glasses of water\nüö´ Limit: Sugar, processed foods, trans fats, excess salt",
        "ü•ó Nutrition by Goal:\n\nüîπ Weight Loss:\n‚Ä¢ Calorie deficit (500 less/day)\n‚Ä¢ High protein, high fiber\n‚Ä¢ Small frequent meals\n‚Ä¢ Avoid liquid calories\n\nüîπ Muscle Gain:\n‚Ä¢ Protein: 1.6-2.2g/kg body weight\n‚Ä¢ Calorie surplus (300-500 more/day)\n‚Ä¢ Post-workout nutrition\n\nüîπ General Health:\n‚Ä¢ Colorful plate (variety)\n‚Ä¢ Portion control\n‚Ä¢ Mindful eating\n‚Ä¢ 80/20 rule (healthy/treats)",
        "üçΩÔ∏è Meal Planning Tips:\n\n Breakfast (25% calories):\n‚Ä¢ Oats with fruits & nuts\n‚Ä¢ Eggs with whole grain toast\n‚Ä¢ Greek yogurt with berries\n\n Lunch (35% calories):\n‚Ä¢ Lean protein + vegetables + grain\n‚Ä¢ Salads with grilled chicken/fish\n\n Dinner (30% calories):\n‚Ä¢ Light, early (3 hrs before sleep)\n‚Ä¢ Soup + protein + veggies\n\n Snacks (10% calories):\n‚Ä¢ Fruits, nuts, yogurt\n‚Ä¢ Avoid processed snacks"
      ]
    },
    exercise: {
      keywords: ['exercise', 'workout', 'fitness', 'activity', 'gym', 'running', 'walking', 'cardio', 'strength', 'yoga'],
      responses: [
        "üèÉ Complete Exercise Guide:\n\nüìä Weekly Requirements:\n‚Ä¢ Cardio: 150 min moderate OR 75 min vigorous\n‚Ä¢ Strength: 2-3 days (all major muscles)\n‚Ä¢ Flexibility: Daily stretching\n‚Ä¢ Rest: 1-2 days recovery\n\nüî• Beginner's Plan:\nWeek 1-4:\n‚Ä¢ 20 min walk (3x/week)\n‚Ä¢ Bodyweight exercises (2x/week)\n‚Ä¢ Stretching (daily)\n\nGradually increase duration & intensity",
        "üí™ Exercise by Goal:\n\nüîπ Weight Loss:\n‚Ä¢ HIIT: 20-30 min, 3x/week\n‚Ä¢ Steady cardio: 45 min, 4x/week\n‚Ä¢ Strength: 2x/week (preserves muscle)\n‚Ä¢ Daily: 10,000 steps\n\nüîπ Muscle Building:\n‚Ä¢ Strength: 4-5x/week (split routine)\n‚Ä¢ Compound exercises: Squats, deadlifts, bench\n‚Ä¢ Progressive overload\n‚Ä¢ Rest between workouts\n\nüîπ General Fitness:\n‚Ä¢ Mix cardio + strength\n‚Ä¢ Fun activities: Sports, dance, swimming\n‚Ä¢ Consistency > intensity",
        "üéØ Workout Tips:\n\n‚úÖ Pre-Workout:\n‚Ä¢ Light meal 2 hrs before\n‚Ä¢ Warm-up: 5-10 min\n‚Ä¢ Stay hydrated\n\n‚úÖ During Workout:\n‚Ä¢ Proper form > heavy weights\n‚Ä¢ Controlled breathing\n‚Ä¢ Listen to your body\n\n‚úÖ Post-Workout:\n‚Ä¢ Cool down & stretch\n‚Ä¢ Protein within 30 min\n‚Ä¢ Rehydrate\n‚Ä¢ Track progress\n\n‚ö†Ô∏è Stop if: Severe pain, dizziness, chest discomfort"
      ]
    },
    sleep: {
      keywords: ['sleep', 'insomnia', 'tired', 'rest', 'bedtime', 'sleeping', 'cant sleep', 'awake'],
      responses: [
        "üò¥ Sleep Optimization Guide:\n\n‚è∞ Recommended Sleep:\n‚Ä¢ Adults: 7-9 hours\n‚Ä¢ Teenagers: 8-10 hours\n‚Ä¢ Children: 9-12 hours\n\nüåô Sleep Hygiene:\n1. Consistent schedule (same time daily)\n2. Dark, cool room (60-67¬∞F)\n3. No screens 1 hour before bed\n4. Comfortable mattress & pillow\n5. No caffeine after 2 PM\n6. Exercise, but not before bed\n7. Light dinner 3 hours before sleep",
        "üí§ Sleep Improvement Protocol:\n\nüåÜ Evening Routine (2 hrs before bed):\n‚Ä¢ Dim lights, reduce stimulation\n‚Ä¢ Warm shower/bath\n‚Ä¢ Reading, meditation, gentle stretching\n‚Ä¢ Herbal tea (chamomile, lavender)\n‚Ä¢ Write tomorrow's to-do list\n\nüö´ Avoid:\n‚Ä¢ Heavy meals\n‚Ä¢ Alcohol (disrupts sleep cycles)\n‚Ä¢ Intense exercise\n‚Ä¢ Work/stressful activities\n‚Ä¢ Daytime naps >20 min\n\n‚ö†Ô∏è Consult doctor if:\n‚Ä¢ Chronic insomnia (>3 weeks)\n‚Ä¢ Loud snoring (sleep apnea?)\n‚Ä¢ Excessive daytime sleepiness"
      ]
    },
    mental_health: {
      keywords: ['stress', 'anxiety', 'depression', 'mental health', 'mood', 'worried', 'sad', 'panic', 'overwhelmed'],
      responses: [
        "üß† Mental Health Support:\n\nI see you're going through a tough time. Mental health matters just as much as physical health.\n\nüíö Immediate Relief:\n‚Ä¢ Deep breathing: 4-7-8 technique\n‚Ä¢ Grounding: 5-4-3-2-1 method\n‚Ä¢ Call trusted friend/family\n‚Ä¢ Take a walk in nature\n‚Ä¢ Listen to calming music\n\nüìû Professional Help:\n‚Ä¢ Therapist/Counselor\n‚Ä¢ Psychiatrist (if needed)\n‚Ä¢ Support groups\n‚Ä¢ Crisis hotline: 988 (US)\n\nRemember: It's okay to not be okay. Seeking help is strength, not weakness.",
        "üåü Stress Management Techniques:\n\n1Ô∏è‚É£ Mindfulness & Meditation:\n‚Ä¢ 10 min daily practice\n‚Ä¢ Focus on breathing\n‚Ä¢ Body scan relaxation\n\n2Ô∏è‚É£ Physical Activity:\n‚Ä¢ Releases endorphins\n‚Ä¢ Reduces cortisol\n‚Ä¢ Improves mood\n\n3Ô∏è‚É£ Social Connection:\n‚Ä¢ Talk to loved ones\n‚Ä¢ Join communities\n‚Ä¢ Volunteer work\n\n4Ô∏è‚É£ Time Management:\n‚Ä¢ Prioritize tasks\n‚Ä¢ Say no when needed\n‚Ä¢ Take regular breaks\n\n5Ô∏è‚É£ Self-Care:\n‚Ä¢ Adequate sleep\n‚Ä¢ Healthy diet\n‚Ä¢ Hobbies & interests\n‚Ä¢ Set boundaries",
        "‚ö†Ô∏è When to Seek Immediate Help:\n\nüö® Call emergency services if experiencing:\n‚Ä¢ Thoughts of self-harm or suicide\n‚Ä¢ Plans to hurt self or others\n‚Ä¢ Severe panic attacks\n‚Ä¢ Complete inability to function\n‚Ä¢ Psychotic symptoms (hallucinations)\n\nüì≤ Crisis Resources:\n‚Ä¢ National Suicide Prevention: 988\n‚Ä¢ Crisis Text Line: Text HOME to 741741\n‚Ä¢ SAMHSA Helpline: 1-800-662-4357\n\nYou're not alone. Help is available 24/7."
      ]
    },
    medications: {
      keywords: ['medicine', 'medication', 'pills', 'dosage', 'side effects', 'prescription', 'drug', 'tablet'],
      responses: [
        "üíä Medication Safety Guide:\n\n‚úÖ Essential Rules:\n1. Take as prescribed (time, dose, duration)\n2. Don't skip or double doses\n3. Never share prescriptions\n4. Check expiration dates\n5. Store properly (cool, dry place)\n6. Keep medication list updated\n7. Inform all doctors of all meds\n\n‚ö†Ô∏è Report to Doctor:\n‚Ä¢ New side effects\n‚Ä¢ Allergic reactions\n‚Ä¢ Medication not working\n‚Ä¢ Difficulty affording meds\n\nüö´ Never combine:\n‚Ä¢ Alcohol with most medications\n‚Ä¢ Multiple drugs without consulting doctor",
        "üìã Medication Management Tips:\n\nüïê Timing:\n‚Ä¢ Set daily alarms/reminders\n‚Ä¢ Use pill organizers\n‚Ä¢ Link to daily routines (breakfast, bedtime)\n\nüì± Apps:\n‚Ä¢ Medisafe\n‚Ä¢ MyTherapy\n‚Ä¢ CareZone\n\nüí° Understanding Labels:\n‚Ä¢ Take with food: Prevents stomach upset\n‚Ä¢ Empty stomach: 1 hr before or 2 hrs after meals\n‚Ä¢ Do not crush: May alter effectiveness\n\nüîç Side Effects:\n‚Ä¢ Common: Usually minor, temporary\n‚Ä¢ Serious: Difficulty breathing, severe rash, chest pain\n\nüìû Always consult pharmacist/doctor for clarification"
      ]
    },
    prevention: {
      keywords: ['prevent', 'vaccination', 'checkup', 'screening', 'health check', 'immunization'],
      responses: [
        "üõ°Ô∏è Preventive Healthcare Checklist:\n\nüìÖ Annual Screenings:\n‚Ä¢ Blood pressure\n‚Ä¢ Cholesterol levels\n‚Ä¢ Blood sugar (diabetes)\n‚Ä¢ BMI & weight\n‚Ä¢ Vision & dental\n\nüíâ Vaccinations:\n‚Ä¢ Flu shot (annual)\n‚Ä¢ COVID-19 (as recommended)\n‚Ä¢ Tdap (every 10 years)\n‚Ä¢ Age-specific vaccines\n\nüîç Age-Specific Screening:\n Women:\n‚Ä¢ Mammogram: 40+ (annual)\n‚Ä¢ Pap smear: 21-65 (3-5 years)\n‚Ä¢ Bone density: 65+ (biennial)\n\n Men:\n‚Ä¢ Prostate: 50+ (annual)\n‚Ä¢ Colon cancer: 45+ (as advised)\n\nüè• Don't skip routine checkups!"
      ]
    },
    emergency: {
      keywords: ['emergency', 'urgent', 'severe', 'serious', 'critical', 'help'],
      responses: [
        "üö® EMERGENCY PROTOCOLS:\n\nCALL 911 IMMEDIATELY if experiencing:\n\n‚ù§Ô∏è Heart Attack Signs:\n‚Ä¢ Chest pain/pressure\n‚Ä¢ Left arm pain\n‚Ä¢ Shortness of breath\n‚Ä¢ Nausea, cold sweat\n\nüß† Stroke Signs (FAST):\n‚Ä¢ Face drooping\n‚Ä¢ Arm weakness\n‚Ä¢ Speech difficulty\n‚Ä¢ Time to call 911\n\n‚ö†Ô∏è Other Emergencies:\n‚Ä¢ Severe bleeding\n‚Ä¢ Difficulty breathing\n‚Ä¢ Severe allergic reaction\n‚Ä¢ Loss of consciousness\n‚Ä¢ Severe burns\n‚Ä¢ Poisoning\n‚Ä¢ Major trauma\n\nüìû Don't wait - call immediately!\nWhile waiting: Stay calm, don't move patient unless necessary, follow 911 operator instructions."
      ]
    }
  };

  // Advanced response generator with context awareness
  const generateResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // Greeting detection
    if (/^(hello|hi|hey|good morning|good afternoon|good evening)\b/i.test(message)) {
      const greetings = [
        "Hello! üëã How can I assist you with your health today?",
        "Hi there! üòä I'm here to help. What health topic would you like to discuss?",
        "Hey! Welcome back! What can I help you with today?"
      ];
      return greetings[Math.floor(Math.random() * greetings.length)];
    }

    // Thanks/goodbye detection
    if (message.includes('thank') || message.includes('thanks')) {
      return "You're very welcome! üòä Remember, I provide general health information only. For personalized medical advice, always consult with healthcare professionals.\n\nFeel free to ask me anything else about your health!";
    }

    if (message.includes('bye') || message.includes('goodbye')) {
      return "Take care and stay healthy! üëã Feel free to return anytime you need health information or guidance. Remember to:\n\n‚úÖ Stay hydrated\n‚úÖ Get adequate sleep\n‚úÖ Exercise regularly\n‚úÖ Eat nutritious meals\n\nGoodbye for now!";
    }

    // Emergency keywords - HIGHEST PRIORITY
    const criticalKeywords = ['suicide', 'kill myself', 'end my life', 'hurt myself', 'self harm'];
    if (criticalKeywords.some(keyword => message.includes(keyword))) {
      return "üö® IMMEDIATE HELP NEEDED üö®\n\nI'm very concerned about what you've shared. Please reach out for help RIGHT NOW:\n\nüìû National Suicide Prevention Lifeline:\n‚Ä¢ Call/Text 988 (24/7, free, confidential)\n‚Ä¢ Or call 1-800-273-8255\n\nüì± Crisis Text Line:\n‚Ä¢ Text HOME to 741741\n\nüè• Emergency Services:\n‚Ä¢ Call 911 or go to nearest ER\n\nYou are not alone. Your life matters. People care about you and want to help. These resources are available 24/7.";
    }

    const emergencyKeywords = ['emergency', 'urgent', 'severe pain', 'chest pain', 'cant breathe', 'bleeding', 'unconscious', 'stroke', 'heart attack'];
    if (emergencyKeywords.some(keyword => message.includes(keyword))) {
      return "üö® THIS SOUNDS LIKE A MEDICAL EMERGENCY! üö®\n\nüìû CALL 911 IMMEDIATELY or go to the nearest emergency room!\n\nDo NOT wait for online advice in emergency situations. Emergency services can provide immediate, life-saving assistance.\n\nWhile waiting for help:\n‚Ä¢ Stay calm\n‚Ä¢ Don't move if injured\n‚Ä¢ Note symptoms and time started\n‚Ä¢ Have someone stay with you\n\nYour safety is the top priority!";
    }

    // Multi-keyword matching with priority scoring
    let bestMatch = { category: null, score: 0 };
    
    for (const [category, data] of Object.entries(healthKnowledge)) {
      const matchCount = data.keywords.filter(keyword => message.includes(keyword)).length;
      if (matchCount > bestMatch.score) {
        bestMatch = { category, score: matchCount };
      }
    }

    if (bestMatch.category && bestMatch.score > 0) {
      const responses = healthKnowledge[bestMatch.category].responses;
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Context-aware default responses
    const defaultResponses = [
      "I'd be happy to help! üòä I specialize in:\n\nüè• Health Symptoms & Guidance\nüíä Medication Information\nüçé Nutrition & Diet Planning\nüèÉ Exercise & Fitness\nüò¥ Sleep Optimization\nüß† Mental Health Support\nüõ°Ô∏è Preventive Care\n\nCould you tell me more about what specific health topic you'd like to discuss?",
      "I'm here to assist with general health information! I can provide guidance on symptoms, nutrition, exercise, sleep, mental health, and preventive care.\n\nWhat specific health concern or question do you have? The more details you provide, the better I can help!",
      "I want to make sure I give you the most helpful information. Could you please clarify:\n\n‚Ä¢ What specific health topic you're interested in?\n‚Ä¢ Are you experiencing any symptoms?\n‚Ä¢ Is this for general wellness or a specific concern?\n\nFeel free to use the quick action buttons below for common topics!"
    ];

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);
    setShowSuggestions(false);

    // Simulate AI processing time
    setTimeout(() => {
      const botResponse = {
        id: Date.now() + 1,
        text: generateResponse(inputMessage),
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1500); // Random delay 1.5-3 seconds
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // Enhanced quick actions with categories
  const quickActions = [
    { icon: 'ü§ï', text: 'Symptom Checker', prompt: 'I have some symptoms I want to discuss' },
    { icon: 'üçé', text: 'Diet Plan', prompt: 'I need help with nutrition and diet planning' },
    { icon: 'üíä', text: 'Medication Info', prompt: 'I have questions about medications' },
    { icon: 'üèÉ', text: 'Exercise Guide', prompt: 'What exercise routine do you recommend?' },
    { icon: 'üò¥', text: 'Sleep Better', prompt: 'How can I improve my sleep quality?' },
    { icon: 'üß†', text: 'Stress Relief', prompt: 'I need help managing stress and anxiety' },
    { icon: 'üõ°Ô∏è', text: 'Preventive Care', prompt: 'What preventive health measures should I take?' },
    { icon: 'üö®', text: 'Emergency Info', prompt: 'When should I seek emergency medical care?' }
  ];

  const handleQuickAction = (prompt) => {
    setInputMessage(prompt);
    setTimeout(() => sendMessage(), 100);
  };

  const clearChat = () => {
    setMessages([
      {
        id: 1,
        text: `Hello again ${user?.name}! üëã Chat cleared. How can I help you today?`,
        sender: 'bot',
        timestamp: new Date(),
        type: 'welcome'
      }
    ]);
    setShowSuggestions(true);
    toast.success('Chat history cleared');
  };

  const exportChat = () => {
    const chatText = messages.map(msg => 
      `[${msg.timestamp.toLocaleString()}] ${msg.sender === 'user' ? 'You' : 'AI Assistant'}: ${msg.text}`
    ).join('\n\n');

    const blob = new Blob([chatText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `health-chat-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    toast.success('Chat exported successfully!');
  };

  return (
    <div className={`chatbot-page ${isDarkMode ? 'dark-mode' : ''}`}>
      <div className="chatbot-hero">
        <div className="container">
          <h1 className="chatbot-title">
            <span className="gradient-text">ü§ñ Advanced AI Health Assistant</span>
          </h1>
          <p className="chatbot-subtitle">
            Powered by intelligent medical knowledge ‚Ä¢ Available 24/7 ‚Ä¢ Instant Responses
          </p>
          <div className="chatbot-features">
            <span className="feature-badge">üí¨ Natural Conversation</span>
            <span className="feature-badge">üîí 100% Private</span>
            <span className="feature-badge">‚ö° Instant Answers</span>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="chatbot-container">
          {/* Chat Header */}
          <div className="chat-header">
            <div className="bot-info">
              <div className="bot-avatar">ü§ñ</div>
              <div>
                <h3>AI Health Assistant</h3>
                <span className="status-indicator">
                  <span className="status-dot"></span> Online & Ready
                </span>
              </div>
            </div>
            <div className="chat-actions">
              <button onClick={exportChat} className="icon-btn" title="Export Chat">
                üì•
              </button>
              <button onClick={clearChat} className="icon-btn" title="Clear Chat">
                üóëÔ∏è
              </button>
            </div>
          </div>

          {/* Chat Messages */}
          <div className="chat-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message-wrapper ${message.sender === 'user' ? 'user-wrapper' : 'bot-wrapper'}`}
              >
                <div className="message-avatar">
                  {message.sender === 'user' ? (
                    <div className="user-avatar">{user?.name?.charAt(0).toUpperCase() || 'üë§'}</div>
                  ) : (
                    <div className="bot-avatar-sm">ü§ñ</div>
                  )}
                </div>
                <div className="message-bubble">
                  <div className="message-text">{message.text}</div>
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="message-wrapper bot-wrapper">
                <div className="message-avatar">
                  <div className="bot-avatar-sm">ü§ñ</div>
                </div>
                <div className="message-bubble">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                  <div className="typing-text">AI is thinking...</div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Actions */}
          {showSuggestions && (
            <div className="quick-actions-section">
              <p className="quick-title">üéØ Quick Actions - Choose a topic:</p>
              <div className="quick-actions-grid">
                {quickActions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickAction(action.prompt)}
                    className="quick-action-btn"
                  >
                    <span className="action-icon">{action.icon}</span>
                    <span className="action-text">{action.text}</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Chat Input */}
          <div className="chat-input-section">
            <div className="input-container">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type your health question here... (Press Enter to send)"
                className="message-input"
                rows="2"
                maxLength="500"
              />
              <div className="input-footer">
                <span className="char-count">{inputMessage.length}/500</span>
                <button
                  onClick={sendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                  className="send-btn"
                >
                  {isTyping ? '‚è≥ Processing...' : 'üì§ Send Message'}
                </button>
              </div>
            </div>
          </div>

          {/* Disclaimer */}
          <div className="disclaimer-box">
            <div className="disclaimer-icon">‚ö†Ô∏è</div>
            <div className="disclaimer-content">
              <strong>Important Medical Disclaimer:</strong> This AI assistant provides general health information and should not replace professional medical advice, diagnosis, or treatment. Always consult qualified healthcare providers for medical concerns. In emergencies, call 911 immediately.
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: `Hello ${user?.name || 'there'}! I'm your AI Health Assistant. I can help answer general health questions, provide wellness tips, and offer basic medical guidance. How can I help you today?`,
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Health knowledge base with responses
  const healthKnowledge = {
    symptoms: {
      keywords: ['headache', 'fever', 'cough', 'cold', 'pain', 'stomach', 'nausea', 'dizzy', 'tired', 'fatigue'],
      responses: [
        "I understand you're experiencing symptoms. While I can provide general information, it's important to consult with a healthcare professional for proper diagnosis and treatment.",
        "For common symptoms like headaches or mild fever, rest and hydration often help. However, if symptoms persist or worsen, please see a doctor.",
        "If you're experiencing severe symptoms or emergency signs (chest pain, difficulty breathing, severe bleeding), please seek immediate medical attention or call emergency services."
      ]
    },
    nutrition: {
      keywords: ['diet', 'food', 'nutrition', 'vitamins', 'healthy eating', 'weight', 'calories'],
      responses: [
        "A balanced diet includes fruits, vegetables, whole grains, lean proteins, and healthy fats. Aim for 5 servings of fruits and vegetables daily.",
        "Stay hydrated by drinking 8-10 glasses of water daily. Limit processed foods, sugar, and excessive salt.",
        "For personalized nutrition advice, consider consulting with a registered dietitian who can create a plan tailored to your needs."
      ]
    },
    exercise: {
      keywords: ['exercise', 'workout', 'fitness', 'activity', 'gym', 'running', 'walking'],
      responses: [
        "Aim for at least 150 minutes of moderate aerobic activity or 75 minutes of vigorous activity weekly, plus muscle-strengthening exercises twice a week.",
        "Start slowly if you're new to exercise. Even a 10-minute walk daily can provide health benefits.",
        "Choose activities you enjoy - dancing, swimming, hiking, or playing sports can all be great forms of exercise!"
      ]
    },
    sleep: {
      keywords: ['sleep', 'insomnia', 'tired', 'rest', 'bedtime', 'sleeping'],
      responses: [
        "Adults need 7-9 hours of quality sleep nightly. Maintain a consistent sleep schedule by going to bed and waking up at the same time daily.",
        "Create a relaxing bedtime routine: limit screen time, keep your bedroom cool and dark, and avoid caffeine late in the day.",
        "If you have persistent sleep problems, consider speaking with a healthcare provider about possible sleep disorders."
      ]
    },
    mental_health: {
      keywords: ['stress', 'anxiety', 'depression', 'mental health', 'mood', 'worried', 'sad'],
      responses: [
        "Mental health is just as important as physical health. Practice stress management through deep breathing, meditation, or yoga.",
        "Stay connected with friends and family, engage in activities you enjoy, and don't hesitate to seek professional help if needed.",
        "If you're experiencing persistent sadness, anxiety, or thoughts of self-harm, please reach out to a mental health professional or crisis helpline immediately."
      ]
    },
    medications: {
      keywords: ['medicine', 'medication', 'pills', 'dosage', 'side effects', 'prescription'],
      responses: [
        "Always take medications as prescribed by your healthcare provider. Don't skip doses or stop taking medication without consulting your doctor.",
        "Keep an updated list of all medications you take, including over-the-counter drugs and supplements.",
        "If you experience side effects, contact your healthcare provider. Never share prescription medications with others."
      ]
    },
    prevention: {
      keywords: ['prevent', 'vaccination', 'checkup', 'screening', 'health check'],
      responses: [
        "Regular health screenings and preventive care are crucial. Follow your doctor's recommendations for checkups, vaccinations, and screenings.",
        "Practice good hygiene: wash hands frequently, cover coughs and sneezes, and avoid close contact with sick individuals.",
        "Maintain a healthy lifestyle with good nutrition, regular exercise, adequate sleep, and stress management."
      ]
    }
  };

  const generateResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // Check for greetings
    if (message.includes('hello') || message.includes('hi') || message.includes('hey')) {
      return "Hello! I'm here to help with your health questions. What would you like to know about?";
    }

    // Check for thanks
    if (message.includes('thank') || message.includes('thanks')) {
      return "You're welcome! Remember, I provide general health information only. Always consult healthcare professionals for medical advice. Is there anything else I can help you with?";
    }

    // Emergency keywords
    const emergencyKeywords = ['emergency', 'urgent', 'severe pain', 'chest pain', 'can\'t breathe', 'bleeding', 'unconscious'];
    if (emergencyKeywords.some(keyword => message.includes(keyword))) {
      return "üö® This sounds like a medical emergency. Please call emergency services (911) or go to the nearest emergency room immediately. Don't wait for online advice in emergency situations.";
    }

    // Find matching category
    for (const [, data] of Object.entries(healthKnowledge)) {
      if (data.keywords.some(keyword => message.includes(keyword))) {
        const randomResponse = data.responses[Math.floor(Math.random() * data.responses.length)];
        return randomResponse;
      }
    }

    // Default response for unmatched queries
    return "I can help with general health topics like nutrition, exercise, sleep, stress management, and wellness tips. Could you please be more specific about what health topic you'd like to discuss?";
  };

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(() => {
      const botResponse = {
        id: Date.now() + 1,
        text: generateResponse(inputMessage),
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const quickQuestions = [
    "How can I improve my sleep?",
    "What's a healthy diet?",
    "How much exercise do I need?",
    "How to manage stress?",
    "What are preventive health measures?"
  ];

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
  };

  return (
    <div className="page">
      <div className="container">
        <h1>ü§ñ AI Health Assistant</h1>
        <p>Get instant answers to your general health questions</p>

        <div className="chatbot-container">
          <div className="chat-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-content">
                  <div className="message-text">{message.text}</div>
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
                <div className="message-avatar">
                  {message.sender === 'user' ? 'üë§' : 'ü§ñ'}
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="message bot-message">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
                <div className="message-avatar">ü§ñ</div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="quick-questions">
            <p>Quick questions:</p>
            <div className="quick-buttons">
              {quickQuestions.map((question, index) => (
                <button
                  key={index}
                  onClick={() => handleQuickQuestion(question)}
                  className="quick-btn"
                >
                  {question}
                </button>
              ))}
            </div>
          </div>

          <div className="chat-input">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask me about health, nutrition, exercise, sleep, or wellness..."
              className="message-input"
              rows="3"
            />
            <button
              onClick={sendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="send-button"
            >
              Send
            </button>
          </div>

          <div className="disclaimer">
            <p>
              ‚ö†Ô∏è <strong>Medical Disclaimer:</strong> This AI assistant provides general health information only and should not replace professional medical advice, diagnosis, or treatment. Always consult qualified healthcare providers for medical concerns.
            </p>
          </div>
        </div>
      </div>

      <style jsx>{`
        .chatbot-container {
          max-width: 800px;
          margin: 2rem auto;
          border: 1px solid var(--border-color);
          border-radius: 1rem;
          overflow: hidden;
          background-color: var(--background-color);
          box-shadow: var(--shadow-lg);
        }

        .chat-messages {
          height: 500px;
          overflow-y: auto;
          padding: 1rem;
          background-color: var(--light-bg);
        }

        .message {
          display: flex;
          margin-bottom: 1rem;
          align-items: flex-end;
          gap: 0.75rem;
        }

        .user-message {
          flex-direction: row-reverse;
        }

        .message-content {
          max-width: 70%;
          display: flex;
          flex-direction: column;
        }

        .message-text {
          padding: 1rem;
          border-radius: 1rem;
          word-wrap: break-word;
          line-height: 1.5;
        }

        .user-message .message-text {
          background-color: var(--primary-color);
          color: white;
          border-bottom-right-radius: 0.25rem;
        }

        .bot-message .message-text {
          background-color: var(--background-color);
          color: var(--text-color);
          border: 1px solid var(--border-color);
          border-bottom-left-radius: 0.25rem;
        }

        .message-time {
          font-size: 0.75rem;
          color: var(--text-secondary);
          margin-top: 0.25rem;
          padding: 0 0.5rem;
        }

        .user-message .message-time {
          text-align: right;
        }

        .message-avatar {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary-color);
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 1.25rem;
          flex-shrink: 0;
        }

        .typing-indicator {
          display: flex;
          gap: 0.25rem;
          padding: 1rem;
          align-items: center;
        }

        .typing-indicator span {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: var(--text-secondary);
          animation: typing 1.4s infinite ease-in-out;
        }

        .typing-indicator span:nth-child(2) {
          animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
          animation-delay: 0.4s;
        }

        @keyframes typing {
          0%, 60%, 100% {
            transform: translateY(0);
          }
          30% {
            transform: translateY(-10px);
          }
        }

        .quick-questions {
          padding: 1rem;
          border-top: 1px solid var(--border-color);
          background-color: var(--background-color);
        }

        .quick-questions p {
          margin: 0 0 0.75rem 0;
          font-weight: 500;
          color: var(--text-color);
        }

        .quick-buttons {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
        }

        .quick-btn {
          padding: 0.5rem 1rem;
          background-color: var(--light-bg);
          border: 1px solid var(--border-color);
          border-radius: 1rem;
          color: var(--text-color);
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 0.875rem;
        }

        .quick-btn:hover {
          background-color: var(--primary-color);
          color: white;
          border-color: var(--primary-color);
        }

        .chat-input {
          display: flex;
          gap: 0.75rem;
          padding: 1rem;
          background-color: var(--background-color);
          border-top: 1px solid var(--border-color);
        }

        .message-input {
          flex: 1;
          padding: 0.75rem;
          border: 1px solid var(--border-color);
          border-radius: 0.5rem;
          background-color: var(--background-color);
          color: var(--text-color);
          resize: none;
          font-family: inherit;
        }

        .message-input:focus {
          outline: none;
          border-color: var(--primary-color);
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .send-button {
          padding: 0.75rem 1.5rem;
          background-color: var(--primary-color);
          color: white;
          border: none;
          border-radius: 0.5rem;
          cursor: pointer;
          font-weight: 500;
          transition: background-color 0.3s ease;
        }

        .send-button:hover:not(:disabled) {
          background-color: var(--primary-dark);
        }

        .send-button:disabled {
          background-color: var(--text-secondary);
          cursor: not-allowed;
        }

        .disclaimer {
          padding: 1rem;
          background-color: var(--warning-bg, #fef3cd);
          border-top: 1px solid var(--border-color);
          font-size: 0.875rem;
        }

        .disclaimer p {
          margin: 0;
          color: var(--warning-text, #856404);
        }

        @media (max-width: 768px) {
          .message-content {
            max-width: 85%;
          }

          .quick-buttons {
            flex-direction: column;
          }

          .chat-input {
            flex-direction: column;
          }

          .send-button {
            align-self: flex-end;
          }
        }
      `}</style>
    </div>
  );
};

export default Chatbot;